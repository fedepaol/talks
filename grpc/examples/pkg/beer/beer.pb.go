// Code generated by protoc-gen-go. DO NOT EDIT.
// source: beer.proto

package beer

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type BeerID struct {
	Bid                  int32    `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeerID) Reset()         { *m = BeerID{} }
func (m *BeerID) String() string { return proto.CompactTextString(m) }
func (*BeerID) ProtoMessage()    {}
func (*BeerID) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{0}
}

func (m *BeerID) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeerID.Unmarshal(m, b)
}
func (m *BeerID) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeerID.Marshal(b, m, deterministic)
}
func (m *BeerID) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeerID.Merge(m, src)
}
func (m *BeerID) XXX_Size() int {
	return xxx_messageInfo_BeerID.Size(m)
}
func (m *BeerID) XXX_DiscardUnknown() {
	xxx_messageInfo_BeerID.DiscardUnknown(m)
}

var xxx_messageInfo_BeerID proto.InternalMessageInfo

func (m *BeerID) GetBid() int32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

type BeerQueryParams struct {
	Query                string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeerQueryParams) Reset()         { *m = BeerQueryParams{} }
func (m *BeerQueryParams) String() string { return proto.CompactTextString(m) }
func (*BeerQueryParams) ProtoMessage()    {}
func (*BeerQueryParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{1}
}

func (m *BeerQueryParams) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeerQueryParams.Unmarshal(m, b)
}
func (m *BeerQueryParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeerQueryParams.Marshal(b, m, deterministic)
}
func (m *BeerQueryParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeerQueryParams.Merge(m, src)
}
func (m *BeerQueryParams) XXX_Size() int {
	return xxx_messageInfo_BeerQueryParams.Size(m)
}
func (m *BeerQueryParams) XXX_DiscardUnknown() {
	xxx_messageInfo_BeerQueryParams.DiscardUnknown(m)
}

var xxx_messageInfo_BeerQueryParams proto.InternalMessageInfo

func (m *BeerQueryParams) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

type Beer struct {
	Bid                  int32    `protobuf:"varint,1,opt,name=bid,proto3" json:"bid,omitempty"`
	BeerName             string   `protobuf:"bytes,2,opt,name=beer_name,json=beerName,proto3" json:"beer_name,omitempty"`
	BeerDescription      string   `protobuf:"bytes,3,opt,name=beer_description,json=beerDescription,proto3" json:"beer_description,omitempty"`
	BeerStyle            string   `protobuf:"bytes,4,opt,name=beer_style,json=beerStyle,proto3" json:"beer_style,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Beer) Reset()         { *m = Beer{} }
func (m *Beer) String() string { return proto.CompactTextString(m) }
func (*Beer) ProtoMessage()    {}
func (*Beer) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{2}
}

func (m *Beer) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Beer.Unmarshal(m, b)
}
func (m *Beer) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Beer.Marshal(b, m, deterministic)
}
func (m *Beer) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Beer.Merge(m, src)
}
func (m *Beer) XXX_Size() int {
	return xxx_messageInfo_Beer.Size(m)
}
func (m *Beer) XXX_DiscardUnknown() {
	xxx_messageInfo_Beer.DiscardUnknown(m)
}

var xxx_messageInfo_Beer proto.InternalMessageInfo

func (m *Beer) GetBid() int32 {
	if m != nil {
		return m.Bid
	}
	return 0
}

func (m *Beer) GetBeerName() string {
	if m != nil {
		return m.BeerName
	}
	return ""
}

func (m *Beer) GetBeerDescription() string {
	if m != nil {
		return m.BeerDescription
	}
	return ""
}

func (m *Beer) GetBeerStyle() string {
	if m != nil {
		return m.BeerStyle
	}
	return ""
}

type BeerResult struct {
	Found                int32    `protobuf:"varint,1,opt,name=found,proto3" json:"found,omitempty"`
	Offset               int32    `protobuf:"varint,2,opt,name=offset,proto3" json:"offset,omitempty"`
	Limit                int32    `protobuf:"varint,3,opt,name=limit,proto3" json:"limit,omitempty"`
	Term                 string   `protobuf:"bytes,4,opt,name=term,proto3" json:"term,omitempty"`
	ParsedTerm           string   `protobuf:"bytes,5,opt,name=parsed_term,json=parsedTerm,proto3" json:"parsed_term,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeerResult) Reset()         { *m = BeerResult{} }
func (m *BeerResult) String() string { return proto.CompactTextString(m) }
func (*BeerResult) ProtoMessage()    {}
func (*BeerResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{3}
}

func (m *BeerResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeerResult.Unmarshal(m, b)
}
func (m *BeerResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeerResult.Marshal(b, m, deterministic)
}
func (m *BeerResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeerResult.Merge(m, src)
}
func (m *BeerResult) XXX_Size() int {
	return xxx_messageInfo_BeerResult.Size(m)
}
func (m *BeerResult) XXX_DiscardUnknown() {
	xxx_messageInfo_BeerResult.DiscardUnknown(m)
}

var xxx_messageInfo_BeerResult proto.InternalMessageInfo

func (m *BeerResult) GetFound() int32 {
	if m != nil {
		return m.Found
	}
	return 0
}

func (m *BeerResult) GetOffset() int32 {
	if m != nil {
		return m.Offset
	}
	return 0
}

func (m *BeerResult) GetLimit() int32 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func (m *BeerResult) GetTerm() string {
	if m != nil {
		return m.Term
	}
	return ""
}

func (m *BeerResult) GetParsedTerm() string {
	if m != nil {
		return m.ParsedTerm
	}
	return ""
}

type BeerResult_Beers struct {
	Count                int32    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	Items                []*Beer  `protobuf:"bytes,2,rep,name=items,proto3" json:"items,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BeerResult_Beers) Reset()         { *m = BeerResult_Beers{} }
func (m *BeerResult_Beers) String() string { return proto.CompactTextString(m) }
func (*BeerResult_Beers) ProtoMessage()    {}
func (*BeerResult_Beers) Descriptor() ([]byte, []int) {
	return fileDescriptor_3f9c2065d50c4def, []int{3, 0}
}

func (m *BeerResult_Beers) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BeerResult_Beers.Unmarshal(m, b)
}
func (m *BeerResult_Beers) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BeerResult_Beers.Marshal(b, m, deterministic)
}
func (m *BeerResult_Beers) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BeerResult_Beers.Merge(m, src)
}
func (m *BeerResult_Beers) XXX_Size() int {
	return xxx_messageInfo_BeerResult_Beers.Size(m)
}
func (m *BeerResult_Beers) XXX_DiscardUnknown() {
	xxx_messageInfo_BeerResult_Beers.DiscardUnknown(m)
}

var xxx_messageInfo_BeerResult_Beers proto.InternalMessageInfo

func (m *BeerResult_Beers) GetCount() int32 {
	if m != nil {
		return m.Count
	}
	return 0
}

func (m *BeerResult_Beers) GetItems() []*Beer {
	if m != nil {
		return m.Items
	}
	return nil
}

func init() {
	proto.RegisterType((*BeerID)(nil), "BeerID")
	proto.RegisterType((*BeerQueryParams)(nil), "BeerQueryParams")
	proto.RegisterType((*Beer)(nil), "Beer")
	proto.RegisterType((*BeerResult)(nil), "BeerResult")
	proto.RegisterType((*BeerResult_Beers)(nil), "BeerResult.Beers")
}

func init() { proto.RegisterFile("beer.proto", fileDescriptor_3f9c2065d50c4def) }

var fileDescriptor_3f9c2065d50c4def = []byte{
	// 319 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x91, 0x41, 0x6b, 0x3a, 0x31,
	0x10, 0xc5, 0x59, 0x35, 0xfa, 0x77, 0xfc, 0x83, 0x32, 0x94, 0xb2, 0x55, 0x4a, 0x65, 0x0f, 0xad,
	0xbd, 0x2c, 0xc5, 0xde, 0x7a, 0x2c, 0x42, 0xe9, 0xa5, 0xd4, 0xb5, 0x77, 0x59, 0x75, 0x84, 0x80,
	0xd9, 0xd8, 0x24, 0x5b, 0xf0, 0xd4, 0xcf, 0xd6, 0x6f, 0x56, 0x66, 0xa2, 0x14, 0xda, 0x5b, 0xde,
	0x9b, 0x37, 0x99, 0x1f, 0x33, 0x00, 0x2b, 0x22, 0x97, 0xef, 0x9d, 0x0d, 0x36, 0x1b, 0x42, 0xfb,
	0x91, 0xc8, 0x3d, 0xcf, 0x70, 0x00, 0xcd, 0x95, 0xde, 0xa4, 0xc9, 0x38, 0x99, 0xa8, 0x82, 0x9f,
	0xd9, 0x0d, 0xf4, 0xb9, 0x36, 0xaf, 0xc9, 0x1d, 0x5e, 0x4b, 0x57, 0x1a, 0x8f, 0x67, 0xa0, 0xde,
	0x59, 0x4a, 0xac, 0x5b, 0x44, 0x91, 0x7d, 0x42, 0x8b, 0x83, 0x7f, 0xbf, 0xc0, 0x11, 0x74, 0x79,
	0xd8, 0xb2, 0x2a, 0x0d, 0xa5, 0x0d, 0xe9, 0xf9, 0xc7, 0xc6, 0x4b, 0x69, 0x08, 0x6f, 0x61, 0x20,
	0xc5, 0x0d, 0xf9, 0xb5, 0xd3, 0xfb, 0xa0, 0x6d, 0x95, 0x36, 0x25, 0xd3, 0x67, 0x7f, 0xf6, 0x63,
	0xe3, 0x65, 0x84, 0x5e, 0xfa, 0x70, 0xd8, 0x51, 0xda, 0x92, 0x90, 0xfc, 0xbc, 0x60, 0x23, 0xfb,
	0x4a, 0x00, 0x98, 0xa0, 0x20, 0x5f, 0xef, 0x02, 0x53, 0x6e, 0x6d, 0x5d, 0x9d, 0x48, 0xa2, 0xc0,
	0x73, 0x68, 0xdb, 0xed, 0xd6, 0x53, 0x10, 0x10, 0x55, 0x1c, 0x15, 0xa7, 0x77, 0xda, 0xe8, 0x20,
	0xb3, 0x55, 0x11, 0x05, 0x22, 0xb4, 0x02, 0x39, 0x73, 0x9c, 0x25, 0x6f, 0xbc, 0x82, 0xde, 0xbe,
	0x74, 0x9e, 0x36, 0x4b, 0x29, 0x29, 0x29, 0x41, 0xb4, 0xde, 0xc8, 0x99, 0xe1, 0x03, 0x28, 0xc6,
	0x90, 0x3d, 0xad, 0x6d, 0x5d, 0x85, 0x13, 0x81, 0x08, 0x1c, 0x81, 0xd2, 0x81, 0x8c, 0x4f, 0x1b,
	0xe3, 0xe6, 0xa4, 0x37, 0x55, 0xb9, 0x30, 0x47, 0x6f, 0x3a, 0x87, 0xff, 0xd2, 0xbb, 0x20, 0xf7,
	0xa1, 0xd7, 0x84, 0x17, 0xd0, 0x79, 0xa2, 0x20, 0x7b, 0xed, 0xe4, 0xf1, 0x46, 0xc3, 0xd8, 0x81,
	0xd7, 0xd0, 0x95, 0xa3, 0xc4, 0xa5, 0xe7, 0xbf, 0x8e, 0x74, 0x4c, 0xdd, 0x25, 0xab, 0xb6, 0xdc,
	0xf8, 0xfe, 0x3b, 0x00, 0x00, 0xff, 0xff, 0x94, 0xd3, 0xb3, 0x28, 0xf1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BeersServiceClient is the client API for BeersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BeersServiceClient interface {
	GetBeer(ctx context.Context, in *BeerID, opts ...grpc.CallOption) (*Beer, error)
	QueryBeer(ctx context.Context, in *BeerQueryParams, opts ...grpc.CallOption) (BeersService_QueryBeerClient, error)
}

type beersServiceClient struct {
	cc *grpc.ClientConn
}

func NewBeersServiceClient(cc *grpc.ClientConn) BeersServiceClient {
	return &beersServiceClient{cc}
}

func (c *beersServiceClient) GetBeer(ctx context.Context, in *BeerID, opts ...grpc.CallOption) (*Beer, error) {
	out := new(Beer)
	err := c.cc.Invoke(ctx, "/BeersService/GetBeer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *beersServiceClient) QueryBeer(ctx context.Context, in *BeerQueryParams, opts ...grpc.CallOption) (BeersService_QueryBeerClient, error) {
	stream, err := c.cc.NewStream(ctx, &_BeersService_serviceDesc.Streams[0], "/BeersService/QueryBeer", opts...)
	if err != nil {
		return nil, err
	}
	x := &beersServiceQueryBeerClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BeersService_QueryBeerClient interface {
	Recv() (*Beer, error)
	grpc.ClientStream
}

type beersServiceQueryBeerClient struct {
	grpc.ClientStream
}

func (x *beersServiceQueryBeerClient) Recv() (*Beer, error) {
	m := new(Beer)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BeersServiceServer is the server API for BeersService service.
type BeersServiceServer interface {
	GetBeer(context.Context, *BeerID) (*Beer, error)
	QueryBeer(*BeerQueryParams, BeersService_QueryBeerServer) error
}

// UnimplementedBeersServiceServer can be embedded to have forward compatible implementations.
type UnimplementedBeersServiceServer struct {
}

func (*UnimplementedBeersServiceServer) GetBeer(ctx context.Context, req *BeerID) (*Beer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBeer not implemented")
}
func (*UnimplementedBeersServiceServer) QueryBeer(req *BeerQueryParams, srv BeersService_QueryBeerServer) error {
	return status.Errorf(codes.Unimplemented, "method QueryBeer not implemented")
}

func RegisterBeersServiceServer(s *grpc.Server, srv BeersServiceServer) {
	s.RegisterService(&_BeersService_serviceDesc, srv)
}

func _BeersService_GetBeer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BeerID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BeersServiceServer).GetBeer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/BeersService/GetBeer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BeersServiceServer).GetBeer(ctx, req.(*BeerID))
	}
	return interceptor(ctx, in, info, handler)
}

func _BeersService_QueryBeer_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(BeerQueryParams)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BeersServiceServer).QueryBeer(m, &beersServiceQueryBeerServer{stream})
}

type BeersService_QueryBeerServer interface {
	Send(*Beer) error
	grpc.ServerStream
}

type beersServiceQueryBeerServer struct {
	grpc.ServerStream
}

func (x *beersServiceQueryBeerServer) Send(m *Beer) error {
	return x.ServerStream.SendMsg(m)
}

var _BeersService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "BeersService",
	HandlerType: (*BeersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetBeer",
			Handler:    _BeersService_GetBeer_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "QueryBeer",
			Handler:       _BeersService_QueryBeer_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "beer.proto",
}
